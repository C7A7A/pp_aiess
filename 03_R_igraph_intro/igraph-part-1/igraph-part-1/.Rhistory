plot(net2)
V(net2)
V(net2)$type
net2.bp <- bipartite.projection(net2)
plot(net2.bp)
net2.bp
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
plot(net2.bp$proj2, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[ is.na(nodes2$media.type)])
plot(net2.bp$proj1, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[!is.na(nodes2$media.type)])
plot(net2.bp$proj2, vertex.label.color="black", vertex.label.dist=1,
vertex.label=nodes2$media[ is.na(nodes2$media.type)])
is_bipartite(net2)
plot(net2, layout=layout.kamada.kawai(, vertex.color=col[as.numeric(V[net2]$type)+1]))
V[net2]
V(net2)
plot(net2, layout=layout.kamada.kawai(, vertex.color=col[as.numeric(V(net2)$type)+1]))
plot(net2, layout=layout.kamada.kawai, vertex.color=col[as.numeric(V(net2)$type)+1])
col <- c("steelblue1", "white")
plot(net2, layout=layout.kamada.kawai, vertex.color=col[as.numeric(V(net2)$type)+1])
v_col <- as.numeric(V(net2)$type)+1
plot(net2, vertex.color=v_col)
plot(net2, layout=layout.bipartite, vertex.color=v_col)
sample.int(10)
sample(0:1, size=10, replace=TRUE)
rnorm(0:1, size=10, replace=TRUE)
rnorm(10)
abs(rnorm(10))
plot(net, layout=layout.fruchterman.reingold())
plot(net, layout=layout.fruchterman.reingold)
installed.packages(igraph)
installed.packages('igraph')
install.packages(igraph)
install.packages('igraph')
library(igraph) # Load the igraph package
g1 <- graph( edges=c(1,2, 2,3, 3,1), n=3, directed=F )
plot(g1) # A simple plot of the network - we'll talk more about plots later
class(g1)
g1
g2 <- graph( edges=c(1,2, 2,3, 3,1), n=10 ) # now with 10 vertices, and directed by default
plot(g2)
g2
g3 <- graph( c("John", "Jim", "Jim", "Jill", "Jill", "John")) # named vertices
# When the edge list has vertex names, the number of nodes is not needed
plot(g3)
g3
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
plot(g4, edge.arrow.size=.5, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2)
plot(graph_from_literal(a---b, b---c)) # the number of dashes doesn't matter
plot(graph_from_literal(a--+b, b+--c))
plot(graph_from_literal(a+-+b, b+-+c))
plot(graph_from_literal(a:b:c---c:d:e))
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i, j)
plot(gl)
# Access vertices and edges:
E(g4) # The edges of the object
V(g4) # The vertices of the object
# You can also manipulate the network matrix directly:
g4[]
g4[1,]
g4[3,3] <- 10
g4[5,7] <- 10
# Add attributes to the network, vertices, or edges:
V(g4)$name # automatically generated when we created the network.
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
E(g4)$type <- "email" # Edge attribute, assign "email" to all edges
E(g4)$weight <- 10    # Edge weight, setting all existing edges to 10
# Examine attributes
edge_attr(g4)
vertex_attr(g4)
graph_attr(g4)
# Another way to set attributes
# (you can similarly use set_edge_attr(), set_vertex_attr(), etc.)
g4 <- set_graph_attr(g4, "name", "Email Network")
g4 <- set_graph_attr(g4, "something", "A thing")
graph_attr_names(g4)
graph_attr(g4, "name")
graph_attr(g4)
g4 <- delete_graph_attr(g4, "something")
graph_attr(g4)
plot(g4, edge.arrow.size=.5, vertex.label.color="black", vertex.label.dist=1.5,
vertex.color=c( "pink", "skyblue")[1+(V(g4)$gender=="male")] )
g4s <- simplify( g4, remove.multiple = T, remove.loops = F,
edge.attr.comb=list(weight="sum", type="ignore") )
plot(g4s, vertex.label.dist=1.5)
g4s
plot(g4, edge.arrow.size=.5, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1.5, vertex.label.dist=2, edge.curved=0.2)
plot(g2)
plot(g1) # A simple plot of the network - we'll talk more about plots later
# Create a network consisting of 9 nodes organized in a grid.
# For each edge create two attributes and initialize them randomly
# - a boolean attribute "type"
# - a numeric attribute "weight"
# For each node create a "label" attribute with values node_1, node_2, ...
# In addition, for each node create a boolean attribute "type"
# and initialize it randomly
sq_graph <- graph( edges=c(1,2, 2,3, 3,4, 4,1), n=4, directed=F )
plot(sq_graph)
class(sq_graph)
sq_graph
plot(sq_graph)
E(sq_graph)
E(sq_graph)$type <- "type"
E(sq_graph)$weight <- "weight"
sq_graph
edge_attr(sq_graph)
E(sq_graph)$type <- sample(c(TRUE, FALSE))
E(sq_graph)$type2 <- sample(c(TRUE, FALSE))
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph))
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
sq_graph
edge_attr(sq_graph)
E(sq_graph)$weight <-rnorm(ecount(sq_graph))
edge_attr(sq_graph)
vcount(sq_graph)
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
vertex_attr(sq_graph)
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
sq_graph
plot(sq_graph)
# Create a network consisting of 4 nodes organized in a grid.
# For each edge create two attributes and initialize them randomly
# - a boolean attribute "type"
# - a numeric attribute "weight"
# For each node create a "label" attribute with values node_1, node_2, ...
# In addition, for each node create a boolean attribute "type"
# and initialize it randomly
sq_graph <- graph( edges=c(1,2, 2,3, 3,4, 4,1), n=4, directed=F )
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <-rnorm(ecount(sq_graph))
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
# Empty graph
eg <- make_empty_graph(40)
plot(eg, vertex.size=10, vertex.label=NA)
# Full graph
fg <- make_full_graph(40)
plot(fg, vertex.size=10, vertex.label=NA)
# Star graph
st <- make_star(40)
plot(st, vertex.size=10, vertex.label=NA)
# Tree graph
tr <- make_tree(40, children = 3, mode = "undirected")
plot(tr, vertex.size=10, vertex.label=NA)
# Ring graph
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# Erdos-Renyi random graph
# ('n' is number of nodes, 'm' is the number of edges)
er <- sample_gnm(n=100, m=40)
plot(er, vertex.size=6, vertex.label=NA)
# Watts-Strogatz small-world graph
# Creates a lattice with 'dim' dimensions of 'size' nodes each, and rewires edges
# randomly with probability 'p'. You can allow 'loops' and 'multiple' edges.
# The neighborhood in which edges are connected is 'nei'.
sw <- sample_smallworld(dim=2, size=10, nei=1, p=0.1)
plot(sw, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
# Barabasi-Albert preferential attachment model for scale-free graphs
# 'n' is number of nodes, 'power' is the power of attachment (1 is linear)
# 'm' is the number of edges added on each time step
ba <-  sample_pa(n=100, power=1, m=1,  directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
#igraph can also give you some notable historical graphs. For instance:
zach <- graph("Zachary") # the Zachary carate club
plot(zach, vertex.size=10, vertex.label=NA)
# Rewiring a graph
# 'each_edge()' is a rewiring method that changes the edge endpoints
# uniformly randomly with a probability 'prob'.
rn.rewired <- rewire(rn, each_edge(prob=0.05))
plot(rn.rewired, vertex.size=10, vertex.label=NA)
# Rewire to connect vertices to other vertices at a certain distance.
rn.neigh = connect.neighborhood(rn, 5)
plot(rn.neigh, vertex.size=8, vertex.label=NA)
# Combine graphs (disjoint union, assuming separate vertex sets): %du%
plot(rn, vertex.size=10, vertex.label=NA)
plot(tr, vertex.size=10, vertex.label=NA)
plot(rn %du% tr, vertex.size=10, vertex.label=NA)
rm(list = ls()) # clear the workspace again
# Set the working directory to the folder containing the workshop files:
setwd("/home/mikolaj/igraph-part-1/")
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
# Create a network consisting of 4 nodes organized in a grid.
# For each edge create two attributes and initialize them randomly
# - a boolean attribute "type"
# - a numeric attribute "weight"
# For each node create a "label" attribute with values node_1, node_2, ...
# In addition, for each node create a boolean attribute "type"
# and initialize it randomly
sq_graph <- graph( edges=c(1,2, 2,3, 3,4, 4,1), n=4, directed=F )
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <-rnorm(ecount(sq_graph))
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
vertex.colors
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1] + 1
edge.weight <- E(sq_graph)$weight * 10
plot (
sq_graph,
vertex.colors = V(sq_graph)$type,
edge.colors = E(sq_graph)$type,
edge.weight = E(sq_graph)$weight * 10
)
vertex.colors <- 1 + c("blue", "green")[V(sq_graph)$type == 1]
rm(list = ls()) # clear the workspace again
# Set the working directory to the folder containing the workshop files:
setwd("/home/mikolaj/igraph-part-1/")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
# Examine the data:
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
vertex.colors <- c("blue", "green")[1 + V(sq_graph)$type == 1]
# Create a network consisting of 4 nodes organized in a grid.
# For each edge create two attributes and initialize them randomly
# - a boolean attribute "type"
# - a numeric attribute "weight"
# For each node create a "label" attribute with values node_1, node_2, ...
# In addition, for each node create a boolean attribute "type"
# and initialize it randomly
sq_graph <- graph( edges=c(1,2, 2,3, 3,4, 4,1), n=4, directed=F )
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <-rnorm(ecount(sq_graph))
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[1 + V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[1 + E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
vertex.colors
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
vertex.colors
edge.weight
plot(
sq_graph,
vertex.colors = V(sq_graph)$type,
edge.colors = E(sq_graph)$type,
edge.weight = E(sq_graph)$weight * 10
)
E(sq_graph)$weight <-rnorm(ecount(sq_graph))
plot(sq_graph)
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <- sample(c(0:1), ecount(sq_graph, replace=TRUE))
E(sq_graph)$weight <- sample(c(0:1), ecount(sq_graph), replace=TRUE)
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
plot(
sq_graph,
vertex.colors = V(sq_graph)$type,
edge.colors = E(sq_graph)$type,
edge.weight = E(sq_graph)$weight * 10
)
plot(
sq_graph,
vertex.color = V(sq_graph)$type,
edge.color = E(sq_graph)$type,
edge.weight = E(sq_graph)$weight * 10
)
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight * 10
)
plot(
sq_graph,
vertex.color <- 1 + V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight * 10
)
E(sq_graph)$weight
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <- sample(c(1, 2, 3, 4, 5), ecount(sq_graph), replace=TRUE)
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight * 10
)
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight
)
# Create a network consisting of 4 nodes organized in a grid.
# For each edge create two attributes and initialize them randomly
# - a boolean attribute "type"
# - a numeric attribute "weight"
# For each node create a "label" attribute with values node_1, node_2, ...
# In addition, for each node create a boolean attribute "type"
# and initialize it randomly
sq_graph <- graph( edges=c(1,2, 2,3, 3,4, 4,1), n=4, directed=F )
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <- sample(c(1, 2, 3, 4), ecount(sq_graph), replace=TRUE)
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight * 10
)
E(sq_graph)$weight <- rnorm(ecount(sq_graph), mean = 0, sd = 1)
E(sq_graph)$type <- sample(c(TRUE, FALSE), ecount(sq_graph), replace=TRUE)
E(sq_graph)$weight <- rnorm(ecount(sq_graph), mean = 0, sd = 1)
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
E(sq_graph)$weight <- abs(rnorm(ecount(sq_graph), mean = 0, sd = 1))
V(sq_graph)$label <- paste("node", 1:vcount(sq_graph), sep="_")
V(sq_graph)$type <- sample(c(TRUE, FALSE), vcount(sq_graph), replace=TRUE)
edge_attr(sq_graph)
vertex_attr(sq_graph)
plot(sq_graph)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- E(sq_graph)$weight * 10
)
vertex.colors <- c("blue", "green")[V(sq_graph)$type == 1]
edge.colors <- c("red", "orange")[E(sq_graph)$type == 1]
edge.weight <- E(sq_graph)$weight * 10
edge.weight
plot(
sq_graph,
vertex.color <- V(sq_graph)$type,
edge.color <- E(sq_graph)$type,
edge.weight <- edge.weight
)
plot(
sq_graph,
vertex.color <- V(sq_graph)$type
)
plot(
sq_graph
)
plot(
sq_graph
)
plot(
sq_graph,
edge.weight <- E(sq_graph)$weight * 10
)
edge.weight
plot(
sq_graph,
edge.weight <- 10
)
rm(list = ls()) # clear the workspace again
# Set the working directory to the folder containing the workshop files:
setwd("/home/mikolaj/igraph-part-1/")
# Set the working directory to the folder containing the workshop files:
setwd("C:\Users\User\studia\pp_aiess\03_R_igraph_intro\igraph-part-1\igraph-part-1\")
# Set the working directory to the folder containing the workshop files:
setwd("C:/Users/User/studia/pp_aiess/03_R_igraph_intro/igraph-part-1/igraph-part-1\")
# DATASET: edgelist
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
# Examine the data:
# Set the working directory to the folder containing the workshop files:
setwd("C:/Users/User/studia/pp_aiess/03_R_igraph_intro/igraph-part-1/igraph-part-1/")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
# Examine the data:
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
# Collapse multiple links of the same type between the same two nodes
# by summing their weights, using aggregate() by "from", "to", & "type":
# (we don't use "simplify()" here so as not to collapse different link types)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
library(igraph)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# Examine the resulting object:
class(net)
net
# We can look at the nodes, edges, and their attributes:
E(net)
V(net)
E(net)$type
V(net)$media
plot(net, edge.arrow.size=.4,vertex.label=NA)
# Removing loops from the graph:
net <- simplify(net, remove.multiple = F, remove.loops = T)
# If you need them, you can extract an edge list or a matrix from igraph networks.
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
# Or data frames describing nodes and edges:
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
plot(net, vertex.color=V(net)$media.type, vertex.label=V(net)$type.label)
nodes2 <- read.csv("d2-nodes.csv", header=T, as.is=T)
links2 <- read.csv("d2-edges.csv", header=T, row.names=1)
# Use the stormofswords.csv file to read the network of "Game of Thrones"
# characters and their interactions. Plot the network and use the number
# of interactions between characters as the weight of each edge.
# Experiment with different layouts of the network. Make sure that
# you display the name of each character in the plot.
data <- read.csv("stormofswords.csv")
data
got_net <- graph_from_data_frame(data, directed = FALSE)
got_net
plot(got_net)
E(got_net)$weight <- data$Weight
plot(got_net)
plot(
got_net,
edge.width = E(got_net)$weight
)
plot(
got_net,
edge.width = E(got_net)$weight / 5
)
plot(
got_net,
edge.width = E(got_net)$weight / 2
)
plot(
got_net,
edge.width = E(got_net)$weight / 3
)
plot(
got_net,
edge.width = E(got_net)$weight / 3
vertex.size = 1
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 1
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 2.5
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 4
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 100
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 25
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 15
)
plot(
got_net,
edge.width = E(got_net)$weight / 3,
vertex.size = 8
)
