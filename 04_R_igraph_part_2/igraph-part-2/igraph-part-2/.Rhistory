library(igraph)
setwd("/home/mikolaj/igraph-part-2/")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
library(igraph)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
library(igraph)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
setwd("C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
setwd("C:/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
links
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
# Plotting with igraph: node options (starting with 'vertex.') and edge options
# (starting with 'edge.').
?igraph.plotting
# Plot with curved edges (edge.curved=.1) and reduce arrow size:
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Set node color to orange and the border color to hex #555555
# Replace the vertex label with the node names stored in "media"
plot(net, edge.arrow.size=.2, edge.curved=0,
vertex.color="lavender", vertex.frame.color="#555555",
vertex.label=V(net)$media, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on media type:
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# Set node size based on audience size:
V(net)$size <- V(net)$audience.size*0.7
# Set node label color:
V(net)$label.color <- "black"
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
# We can also override the attributes explicitly in the plot:
plot(net, edge.color="orange", vertex.color="gray50")
# We can also add a legend explaining the meaning of the colors we used:
plot(net)
legend(x=-1.1, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2.5, bty="n", ncol=3)
# Sometimes, especially with semantic networks, we may be interested in
# plotting only the labels of the nodes:
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
# Let's color the edges of the graph based on their source node color.
# We'll get the starting node for each edge with "ends()".
edge.start <- ends(net, es=E(net), names=F)[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
net.bg <- sample_pa(80, 1.2)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
# Or calculate the vertex coordinates in advance:
l <- layout_in_circle(net.bg)
l
plot(net.bg, layout=l)
# l is simply a matrix of x,y coordinates (N x 2) for the N nodes in the graph.
# You can generate your own:
l <- cbind(1:vcount(net.bg), c(1:vcount(net.bg))**5)
plot(net.bg, layout=l)
# Randomly placed vertices
l <- layout_randomly(net.bg)
plot(net.bg, layout=l)
# Circle layout
l <- layout_in_circle(net.bg)
plot(net.bg, layout=l)
# 3D sphere layout
l <- layout_on_sphere(net.bg)
plot(net.bg, layout=l)
# The Fruchterman-Reingold force-directed algorithm
# Nice but slow, most often used in graphs smaller than ~1000 vertices.
l <- layout_with_fr(net.bg)
plot(net.bg, layout=l)
# You will also notice that the layout is not deterministic - different runs
# will result in slightly different configurations. Saving the layout in l
# allows us to get the exact same result multiple times.
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l)
plot(net.bg, layout=l)
dev.off()
# Get the layout coordinates:
l <- layout_with_fr(net.bg)
# Normalize them so that they are in the -1, 1 interval:
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
# Use the stormofswords.csv file to read the network of "Game of Thrones"
# characters and their interactions. Plot the network as follows:
# - remove all edges that have the weight below the average weight
# - set the color of each node to light blue
# - set the color of node's edge to white
# - make the arrows very small
# - set edge color to light gray
# - set label color to black
data <- read.csv("stormofswords.csv")
data
got_net <- graph.data.frame(data, directed = TRUE)
got_net <- graph_from_data_frame(data, directed = TRUE)
got_net
plot(got_net)
V(got_net)$color <- "lightblue"
plot(got_net)
E(got_net)$color <- "white"
plot(got_net)
E(got_net)$color <- "lightgray"
plot(got_net)
source("C:/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2/igraph.second.part.r", echo=TRUE)
E(got_net)$arrow.size <- 5
plot(got_net)
E(got_net)$arrow.size <- 2
plot(got_net)
E(got_net)$arrow.size <- 0.5
plot(got_net)
V(got_net)$label.color <- "black"
plot(got_net)
V(got_net)$frame.color <- "white"
plot(got_net)
avg_weight
avg_weight <- mean(E(got_net)$Weight)
avg_weight
plot(got_net)
net.bg <- sample_pa(80, 1.2)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
# You can set the layout in the plot function:
plot(net.bg, layout=layout_randomly)
# Or calculate the vertex coordinates in advance:
l <- layout_in_circle(net.bg)
l
plot(net.bg, layout=l)
# l is simply a matrix of x,y coordinates (N x 2) for the N nodes in the graph.
# You can generate your own:
l <- cbind(1:vcount(net.bg), c(1:vcount(net.bg))**5)
plot(net.bg, layout=l)
# Randomly placed vertices
l <- layout_randomly(net.bg)
plot(net.bg, layout=l)
# Circle layout
l <- layout_in_circle(net.bg)
plot(net.bg, layout=l)
# 3D sphere layout
l <- layout_on_sphere(net.bg)
plot(net.bg, layout=l)
# The Fruchterman-Reingold force-directed algorithm
# Nice but slow, most often used in graphs smaller than ~1000 vertices.
l <- layout_with_fr(net.bg)
plot(net.bg, layout=l)
# You will also notice that the layout is not deterministic - different runs
# will result in slightly different configurations. Saving the layout in l
# allows us to get the exact same result multiple times.
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=layout_with_fr)
plot(net.bg, layout=l)
plot(net.bg, layout=l)
dev.off()
# Get the layout coordinates:
l <- layout_with_fr(net.bg)
# Normalize them so that they are in the -1, 1 interval:
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
par(mfrow=c(2,2), mar=c(0,0,0,0))
plot(net.bg, rescale=F, layout=l*0.4)
plot(net.bg, rescale=F, layout=l*0.8)
plot(net.bg, rescale=F, layout=l*1.2)
plot(net.bg, rescale=F, layout=l*1.6)
dev.off()
l <- layout_with_kk(net.bg)
plot(net.bg, layout=l)
# Check out all available layouts in igraph:
?igraph::layout_
layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
par(mfrow=c(5,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
dev.off()
plot(net)
hist(links$weight)
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
par(mfrow=c(5,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
dev.off()
# Use the StormOfSwords network to compute a layout of your choosing.
# Manually modify the layout in such a way that the node "Aemon"
# is displayed in the upper-left corner of the plot
l <- layout_with_kk(got_net.bg)
# Use the StormOfSwords network to compute a layout of your choosing.
# Manually modify the layout in such a way that the node "Aemon"
# is displayed in the upper-left corner of the plot
got_net.bg <- sample_pa(80, 1.2)
l <- layout_with_kk(got_net.bg)
plot(got_net.bg, layout=l)
l <- layout_with_fr(got_net.bg)
plot(got_net.bg, layout=l)
got_net.bg
which(# Use the StormOfSwords network to compute a layout of your choosing.
# Manually modify the layout in such a way that the node "Aemon"
# is displayed in the upper-left corner of the plot
got_net.bg <- sample_pa(80, 1.2)
l <- layout_with_fr(got_net.bg)
which(V(got_name.bg)$name == "Aemon")
which(V(got_net.bg)$name == "Aemon")
which(V(got_net)$name == "Aemon")
aemon_idx <- which(V(got_net)$name == "Aemon")
aemon_idx
l
l[aemon_idx, ] <- c(-100, 100)
l[1, ]
which(V(got_net)$name == "Aemon")
plot(got_net.bg, layout=l)
l[aemon_idx, ] <- c(-10, 10)
plot(got_net.bg, layout=l)
l[aemon_idx, ] <- c(-20, 20)
plot(got_net.bg, layout=l)
plot(net)
hist(links$weight)
mean(links$weight)
sd(links$weight)
# We can delete edges using delete_edges(net, edges)
cut.off <- mean(links$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp, layout=layout_components)
E(net)$width <- 2
plot(net,
edge.color=c("dark red", "slategrey")[(E(net)$type=="hyperlink")+1],
vertex.color="gray40",
layout=layout_in_circle)
# Another way to delete edges:
net.m <- net - E(net)[E(net)$type=="hyperlink"]
net.h <- net - E(net)[E(net)$type=="mention"]
# Plot the two links separately:
par(mfrow=c(1,2))
plot(net.h, vertex.color="orange", main="Tie: Hyperlink")
plot(net.m, vertex.color="lightsteelblue2", main="Tie: Mention")
dev.off()
# Make sure the nodes stay in place in both plots:
par(mfrow=c(1,2),mar=c(1,1,4,1))
l <- layout_with_fr(net)
plot(net.h, vertex.color="orange", layout=l, main="Tie: Hyperlink")
plot(net.m, vertex.color="lightsteelblue2", layout=l, main="Tie: Mention")
dev.off()
# Heatmap of the network matrix:
netm <- get.adjacency(net, attr="weight", sparse=F)
colnames(netm) <- V(net)$media
rownames(netm) <- V(net)$media
palf <- colorRampPalette(c("gold", "dark orange"))
heatmap(netm[,17:1],
Rowv = NA,
Colv = NA,
col = palf(20),
scale="none",
margins=c(10,10) )
nodes2 <- read.csv("d2-nodes.csv", header=T, as.is=T)
links2 <- read.csv("d2-edges.csv", header=T, row.names=1)
net2 <- graph_from_incidence_matrix(links2)
head(nodes2)
head(links2)
net2
plot(net2)
# This time we will make nodes look different based on their type.
V(net2)$color <- c("steelblue", "orange")[V(net2)$type+1]
V(net2)$shape <- c("square", "circle")[V(net2)$type+1]
V(net2)$label <- ""
V(net2)$label[V(net2)$type==F] <- nodes2$media[V(net2)$type==F]
V(net2)$label.cex=.6
V(net2)$label.font=2
plot(net2, vertex.label.color="white", vertex.size=(2-V(net2)$type)*8)
plot(net2, vertex.label=NA, vertex.size=7, layout=layout_as_bipartite)
# Using text as nodes:
par(mar=c(0,0,0,0))
plot(net2, vertex.shape="none", vertex.label=nodes2$media,
vertex.label.color=V(net2)$color, vertex.label.font=2,
vertex.label.cex=.95, edge.color="gray70",  edge.width=2)
dev.off()
# Density
# The proportion of present edges from all possible ties.
edge_density(net, loops=F)
