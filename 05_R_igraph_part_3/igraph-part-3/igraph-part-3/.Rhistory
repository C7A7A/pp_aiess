library(igraph)
setwd("/home/mikolaj/igraph-part-2/")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
library(igraph)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
setwd("/C/Users/User/studia/pp_aiess/04_R_igraph_part_2/igraph-part-2/igraph-part-2")
diamenter_path
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
setwd("C:/Users/User/studia/pp_aiess/05_R_igraph_part_3/exercise")
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph.adjacency(adj_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
plot(net, layout = layout.fruchterman.reingold)
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE, diag = FALSE)
plot(net, layout = layout.fruchterman.reingold)
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph_from_adjacency_matrix(adj_matrix, mode = "max", weighted = TRUE, diag = FALSE)
plot(net, layout = layout.fruchterman.reingold)
degree_centrality <- degree(net)
nodes_size <- 5 + 15 * degree_centrality / max(degree_centrality)
plot(net, layout = layout.fruchterman.reingold, vertex.size=nodes_size)
degree_distr = degree_distribution(net)
hist(
degree_centrality,
breaks = 20,
col = "skyblue",
main = "Degree Distribution",
xlab = "Degree",
ylab = "Frequency"
)
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net), edge.arrow.size=0.5)
diamenter_path
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net), edge.arrow.size=0.75)
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net), edge.arrow.size=1)
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net), edge.arrow.size=10)
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net))
diamenter_path = get_diameter(net)
plot(net, layout=layout_nicely(net), edge.size=12)
plot(net, layout=layout_nicely(net), edge.arrow.size=0.5)
diamenter_path = get_diameter(net)
diamenter_path
E(net)
E(net)[diameter_path]
E(net)[diamenter_path]
net
E(net)[diamenter_path]
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
diamenter_edges = E(net)[diamenter_path]
plot(diamenter_edges)
plot(diamenter_edges)
diamenter_edges
net
library(igraph)
# create necessary data structures from the first part of the tutorial
setwd("C:/Users/User/studia/pp_aiess/05_R_igraph_part_3/igraph-part-3/igraph-part-3")
nodes <- read.csv("d1-nodes.csv", header=T, as.is=T)
links <- read.csv("d1-edges.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
# Average path length
# The mean of the shortest distance between each pair of nodes in the network
# (in both directions for directed graphs).
mean_distance(net, directed=F)
mean_distance(net, directed=T)
# We can also find the length of all shortest paths in the graph:
distances(net) # with edge weights
distances(net, weights=NA) # ignore weights
# We can extract the distances to a node or set of nodes we are interested in.
# Here we will get the distance of every media from the New York Times.
dist.from.NYT <- distances(net, v=V(net)[media=="NY Times"], to=V(net), weights=NA)
dist.from.NYT
# Set colors to plot the distances:
oranges <- colorRampPalette(c("darkred", "gold"))
col <- oranges(max(dist.from.NYT)+1)
col <- col[dist.from.NYT+1]
plot(net,
vertex.color=col,
vertex.label=dist.from.NYT,
edge.arrow.size=.6,
vertex.label.color="white"
)
# We can also find the shortest path between specific nodes.
# Say here between MSNBC and the New York Post:
news.path <- shortest_paths(net,
from = V(net)[media=="MSNBC"],
to  = V(net)[media=="New York Post"],
output = "both") # both path nodes and edges
news.path
# Generate edge color variable to plot the path:
ecol <- rep("gray80", ecount(net))
ecol[unlist(news.path$epath)] <- "orange"
# Generate edge width variable to plot the path:
ew <- rep(2, ecount(net))
ew[unlist(news.path$epath)] <- 4
# Generate node color variable to plot the path:
vcol <- rep("gray40", vcount(net))
vcol[unlist(news.path$vpath)] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
# ecol[unlist(news.path$epath)] <- "orange"
# Generate edge width variable to plot the path:
# ew <- rep(2, ecount(net))
# ew[unlist(news.path$epath)] <- 4
# Generate node color variable to plot the path:
# vcol <- rep("gray40", vcount(net))
# vcol[unlist(news.path$vpath)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
)
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
# ecol[unlist(news.path$epath)] <- "orange"
# Generate edge width variable to plot the path:
# ew <- rep(2, ecount(net))
# ew[unlist(news.path$epath)] <- 4
# Generate node color variable to plot the path:
# vcol <- rep("gray40", vcount(net))
# vcol[unlist(news.path$vpath)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
#     )
ecol
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
# Generate edge width variable to plot the path:
# ew <- rep(2, ecount(net))
# ew[unlist(news.path$epath)] <- 4
# Generate node color variable to plot the path:
# vcol <- rep("gray40", vcount(net))
# vcol[unlist(news.path$vpath)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
#     )
ecol
diamenter_path
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
# ew[unlist(news.path$epath)] <- 4
# Generate node color variable to plot the path:
# vcol <- rep("gray40", vcount(net))
# vcol[unlist(news.path$vpath)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
#     )
diamenter_path
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[unlist(diamenter_path)] <- 4
# Generate node color variable to plot the path:
# vcol <- rep("gray40", vcount(net))
# vcol[unlist(news.path$vpath)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
#     )
ecol
ew
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[unlist(diamenter_path)] <- 4
vcol <- rep("gray40", vcount(net))
vcol[unlist(diamenter_path)] <- "gold"
# plot(net,
#     vertex.color=vcol,
#     edge.color=ecol,
#     edge.width=ew,
#     edge.arrow.mode=0
#     )
vcol
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[unlist(diamenter_path)] <- 4
vcol <- rep("gray40", vcount(net))
vcol[unlist(diamenter_path)] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph_from_adjacency_matrix(adj_matrix, mode = "max", weighted = TRUE, diag = FALSE)
plot(net, layout = layout.fruchterman.reingold)
degree_centrality <- degree(net)
nodes_size <- 5 + 15 * degree_centrality / max(degree_centrality)
plot(net, layout = layout.fruchterman.reingold, vertex.size=nodes_size)
degree_distr = degree_distribution(net)
hist(
degree_centrality,
breaks = 20,
col = "skyblue",
main = "Degree Distribution",
xlab = "Degree",
ylab = "Frequency"
)
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[unlist(diamenter_path)] <- 4
vcol <- rep("gray40", vcount(net))
vcol[unlist(diamenter_path)] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
diamenter_path
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[unlist(diamenter_path)] <- "orange"
vcol <- rep("gray40", vcount(net))
vcol[unlist(diamenter_path)] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
diamenter_path
vcol <- rep("gray40", vcount(net))
vcol[diamenter_path] <- "gold"
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diamenter_path)] <- "orange"
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
vcol <- rep("gray40", vcount(net))
vcol[diamenter_path] <- "gold"
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diamenter_path)] <- "orange"
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
plot(net, vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[diamenter_path] <- 4
vcol <- rep("gray40", vcount(net))
vcol[diamenter_path] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0
)
diamenter_path
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[diamenter_path] <- 4
vcol <- rep("gray40", vcount(net))
vcol[diamenter_path] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0,
layout = layout.fruchterman.reingold
)
diamenter_path = get_diameter(net)
# plot(net, layout=layout_nicely(net))
ecol <- rep("gray80", ecount(net))
ecol[E(net, path=diamenter_path)] <- "orange"
ew <- rep(2, ecount(net))
ew[diamenter_path] <- 4
vcol <- rep("gray40", vcount(net))
vcol[diamenter_path] <- "gold"
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0,
layout = layout.fruchterman.reingold
)
plot(net,
vertex.color=vcol,
edge.color=ecol,
edge.width=ew,
edge.arrow.mode=0,
layout = layout.fruchterman.reingold
)
ceb <- cluster_edge_betweenness(net)
dendPlot(ceb, mode="hclust")
plot(ceb, net)
ceb <- cluster_edge_betweenness(net)
plot_dendrogram(ceb, mode="hclust")
plot(ceb, net)
clp <- cluster_label_prop(net)
plot(clp, net)
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph_from_adjacency_matrix(adj_matrix, mode = "max", weighted = TRUE, diag = FALSE)
plot(net, layout = layout_nicely(net))
degree_centrality <- degree(net)
nodes_size <- 5 + 15 * degree_centrality / max(degree_centrality)
plot(net, layout = layout_nicely(net), vertex.size=nodes_size)
degree_centrality <- degree(net)
nodes_size <- 10 + 15 * degree_centrality / max(degree_centrality)
plot(net, layout = layout_nicely(net), vertex.size=nodes_size)
degree_centrality <- degree(net)
nodes_size <- 7 + 15 * degree_centrality / max(degree_centrality)
plot(net, layout = layout_nicely(net), vertex.size=nodes_size)
degree_centrality <- degree(net)
nodes_size <- 7 + 10 * degree_centrality / max(degree_centrality)
plot(net, layout = layout_nicely(net), vertex.size=nodes_size)
degree_centrality <- degree(net)
nodes_size <- 10 + 10 * degree_centrality / max(degree_centrality)
plot(net, layout = layout_nicely(net), vertex.size=nodes_size)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
data <- read.csv("montreal/MONTREALGANG.csv", header = TRUE, row.names = 1)
# data_atrr <- read.csv("montreal/MONTREALGANG_ATTR.csv")
adj_matrix <- as.matrix(data)
net <- graph_from_adjacency_matrix(adj_matrix, mode = "max", weighted = TRUE, diag = FALSE)
plot(net, layout = layout_nicely(net), edge.arrow.size=0.4)
plot(net, layout = layout_nicely(net), edge.arrow.size=1)
plot(net, layout = layout_nicely(net), edge.arrow.size=0.1)
plot(net, layout = layout_nicely(net), edge.arrow.size=10000)
